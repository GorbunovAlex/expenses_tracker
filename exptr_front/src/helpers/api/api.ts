/**
 * Generated by orval v6.10.3 üç∫
 * Do not edit manually.
 * Swagger EXPTR API
 * API for expense tracker project.
 * OpenAPI spec version: 1.0
 */
import type {
  ModelsGetCategoriesResponse,
  ModelsCategoryResponse,
  ModelsCategoryRequest,
  ResponseResponse,
  ModelsGetOperationsByUserIDResponse,
  ModelsCreateOperationResponse,
  ModelsOperationRequest,
  ModelsUpdateOperationResponse,
  ModelsLoginResponse,
  ModelsLoginRequest,
  ModelsSignUpRequest
} from './models'
import { instance } from './axios-instance'



// eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;


  /**
 * get all categories
 * @summary get all categories
 */
export const getCategories = (
    
 options?: SecondParameter<typeof instance>,) => {
      return instance<ModelsGetCategoriesResponse>(
      {url: `/categories/`, method: 'get'
    },
      options);
    }
  
/**
 * create new category
 * @summary create new category
 */
export const postCategoriesNew = (
    modelsCategoryRequest: ModelsCategoryRequest,
 options?: SecondParameter<typeof instance>,) => {
      return instance<ModelsCategoryResponse>(
      {url: `/categories/new`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: modelsCategoryRequest
    },
      options);
    }
  
/**
 * update category
 * @summary update category
 */
export const putCategoriesId = (
    id: string,
 options?: SecondParameter<typeof instance>,) => {
      return instance<ResponseResponse>(
      {url: `/categories/${id}`, method: 'put'
    },
      options);
    }
  
/**
 * Delete category by id
 * @summary Delete category by id
 */
export const deleteCategoriesId = (
    id: number,
 options?: SecondParameter<typeof instance>,) => {
      return instance<ResponseResponse>(
      {url: `/categories/${id}`, method: 'delete'
    },
      options);
    }
  
/**
 * Get all current user operations
 * @summary Get all current user operations
 */
export const getOperations = (
    
 options?: SecondParameter<typeof instance>,) => {
      return instance<ModelsGetOperationsByUserIDResponse>(
      {url: `/operations`, method: 'get'
    },
      options);
    }
  
/**
 * Create new operation
 * @summary Create new operation
 */
export const postOperationsNew = (
    modelsOperationRequest: ModelsOperationRequest,
 options?: SecondParameter<typeof instance>,) => {
      return instance<ModelsCreateOperationResponse>(
      {url: `/operations/new`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: modelsOperationRequest
    },
      options);
    }
  
/**
 * Update operation by id
 * @summary Update operation by id
 */
export const putOperationsId = (
    id: string,
 options?: SecondParameter<typeof instance>,) => {
      return instance<ModelsUpdateOperationResponse>(
      {url: `/operations/${id}`, method: 'put'
    },
      options);
    }
  
/**
 * Delete operation by id
 * @summary Delete operation by id
 */
export const deleteOperationsId = (
    id: string,
 options?: SecondParameter<typeof instance>,) => {
      return instance<ResponseResponse>(
      {url: `/operations/${id}`, method: 'delete'
    },
      options);
    }
  
/**
 * Login
 * @summary Login
 */
export const postUsersLogin = (
    modelsLoginRequest: ModelsLoginRequest,
 options?: SecondParameter<typeof instance>,) => {
      return instance<ModelsLoginResponse>(
      {url: `/users/login`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: modelsLoginRequest
    },
      options);
    }
  
/**
 * Signup
 * @summary Signup
 */
export const postUsersSignup = (
    modelsSignUpRequest: ModelsSignUpRequest,
 options?: SecondParameter<typeof instance>,) => {
      return instance<ResponseResponse>(
      {url: `/users/signup`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: modelsSignUpRequest
    },
      options);
    }
  

type AwaitedInput<T> = PromiseLike<T> | T;

    type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export type GetCategoriesResult = NonNullable<Awaited<ReturnType<typeof getCategories>>>
export type PostCategoriesNewResult = NonNullable<Awaited<ReturnType<typeof postCategoriesNew>>>
export type PutCategoriesIdResult = NonNullable<Awaited<ReturnType<typeof putCategoriesId>>>
export type DeleteCategoriesIdResult = NonNullable<Awaited<ReturnType<typeof deleteCategoriesId>>>
export type GetOperationsResult = NonNullable<Awaited<ReturnType<typeof getOperations>>>
export type PostOperationsNewResult = NonNullable<Awaited<ReturnType<typeof postOperationsNew>>>
export type PutOperationsIdResult = NonNullable<Awaited<ReturnType<typeof putOperationsId>>>
export type DeleteOperationsIdResult = NonNullable<Awaited<ReturnType<typeof deleteOperationsId>>>
export type PostUsersLoginResult = NonNullable<Awaited<ReturnType<typeof postUsersLogin>>>
export type PostUsersSignupResult = NonNullable<Awaited<ReturnType<typeof postUsersSignup>>>

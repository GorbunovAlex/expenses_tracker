basePath: /api/v1
definitions:
  models.Category:
    properties:
      color:
        type: string
      created_at:
        type: string
      icon:
        type: string
      id:
        type: string
      name:
        type: string
      type:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  models.CategoryRequest:
    properties:
      color:
        type: string
      created_at:
        type: string
      icon:
        type: string
      name:
        type: string
      type:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  models.CategoryResponse:
    properties:
      error:
        type: string
      status:
        type: string
    type: object
  models.CreateOperationResponse:
    properties:
      error:
        type: string
      status:
        type: string
    type: object
  models.GetCategoriesResponse:
    properties:
      categories:
        items:
          $ref: '#/definitions/models.Category'
        type: array
      error:
        type: string
      status:
        type: string
    type: object
  models.GetOperationsByUserIDResponse:
    properties:
      error:
        type: string
      operations:
        items:
          $ref: '#/definitions/models.Operation'
        type: array
      status:
        type: string
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.LoginResponse:
    properties:
      error:
        type: string
      status:
        type: string
      token:
        type: string
    type: object
  models.Operation:
    properties:
      amount:
        type: integer
      category_id:
        type: string
      comment:
        type: string
      created_at:
        type: string
      currency:
        type: string
      id:
        type: string
      name:
        type: string
      type:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  models.OperationRequest:
    properties:
      amount:
        type: integer
      category_id:
        type: string
      comment:
        type: string
      created_at:
        type: string
      currency:
        type: string
      name:
        type: string
      type:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    required:
    - amount
    - category_id
    - created_at
    - currency
    - name
    - type
    - user_id
    type: object
  models.SignUpRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.UpdateOperationResponse:
    properties:
      error:
        type: string
      status:
        type: string
    type: object
  response.Response:
    properties:
      error:
        type: string
      status:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:3000
info:
  contact:
    email: algor.monte@gmail.com
    name: Alexander Gorbunov
  description: API for expense tracker project.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger EXPTR API
  version: "1.0"
paths:
  /categories/:
    get:
      consumes:
      - application/json
      description: get all categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetCategoriesResponse'
        "400":
          description: empty request body
          schema:
            type: string
        "500":
          description: server error
          schema:
            type: string
      summary: get all categories
      tags:
      - categories
  /categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete category by id
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: empty request body
          schema:
            type: string
        "500":
          description: server error
          schema:
            type: string
      summary: Delete category by id
      tags:
      - operations
    put:
      consumes:
      - application/json
      description: update category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: empty request body
          schema:
            type: string
        "500":
          description: server error
          schema:
            type: string
      summary: update category
      tags:
      - categories
  /categories/new:
    post:
      consumes:
      - application/json
      description: create new category
      parameters:
      - description: Update category
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.CategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CategoryResponse'
        "400":
          description: empty request body
          schema:
            type: string
        "500":
          description: server error
          schema:
            type: string
      summary: create new category
      tags:
      - categories
  /operations:
    get:
      consumes:
      - application/json
      description: Get all current user operations
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetOperationsByUserIDResponse'
        "400":
          description: empty request body
          schema:
            type: string
        "500":
          description: server error
          schema:
            type: string
      summary: Get all current user operations
      tags:
      - operations
  /operations/{id}:
    delete:
      consumes:
      - application/json
      description: Delete operation by id
      parameters:
      - description: operation id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: empty id
          schema:
            type: string
        "500":
          description: server error
          schema:
            type: string
      summary: Delete operation by id
      tags:
      - operations
    put:
      consumes:
      - application/json
      description: Update operation by id
      parameters:
      - description: operation id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UpdateOperationResponse'
        "400":
          description: empty request body
          schema:
            type: string
        "500":
          description: server error
          schema:
            type: string
      summary: Update operation by id
      tags:
      - operations
  /operations/new:
    post:
      consumes:
      - application/json
      description: Create new operation
      parameters:
      - description: Create operation
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.OperationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CreateOperationResponse'
        "400":
          description: empty request body
          schema:
            type: string
        "500":
          description: server error
          schema:
            type: string
      summary: Create new operation
      tags:
      - operations
  /users/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: login request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: empty request body
          schema:
            type: string
        "404":
          description: wrong email or password
          schema:
            type: string
        "500":
          description: server error
          schema:
            type: string
      summary: Login
      tags:
      - users
  /users/signup:
    post:
      consumes:
      - application/json
      description: Signup
      parameters:
      - description: signup request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.SignUpRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: empty request body
          schema:
            type: string
        "404":
          description: user already exists
          schema:
            type: string
        "500":
          description: server error
          schema:
            type: string
      summary: Signup
      tags:
      - users
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
